<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dipï½¥et</title>
  <subtitle>The ramblings of a developing web developer</subtitle>
  <id>http://dipet.me</id>
  <link href="http://dipet.me"/>
  <link href="http://dipet.me/feed.xml" rel="self"/>
  <updated>2019-12-22T00:00:00-05:00</updated>
  <author>
    <name>Dion Pettaway</name>
  </author>
  <entry>
    <title>iPhone App Creation</title>
    <link rel="alternate" href="http://dipet.me/projects/monchiesios/"/>
    <id>http://dipet.me/projects/monchiesios/</id>
    <published>2019-12-22T00:00:00-05:00</published>
    <updated>2020-02-03T12:39:08-05:00</updated>
    <author>
      <name>Dion Pettaway</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="Monchies" src="https://i.imgur.com/Cw7ruPn.gif" /&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been working on a smallish iPhone app for a couple months alongside other projects, and I&amp;rsquo;m finally finished it. It&amp;rsquo;s nothing special in terms of size and feature set but regardless I&amp;rsquo;m proud of this one. I call it &amp;ldquo;Monchies&amp;rdquo; not really the most inventive name, but it&amp;rsquo;s a small personal food blogging app.&lt;/p&gt;

&lt;p&gt;The idea is simple, you just take photos of the places you eat and you can keep track of where you&amp;rsquo;ve eaten at.
I figured I&amp;rsquo;d keep the app small to avoid setting the bar for myself too high overwhelming me, that and also to avoid feature creep which has definitely plagued me in older projects.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve learned a great deal about app development using UIKit while creating this app. As an example, I wanted to create a floating button for adding new locations and I thought I essentially got it working on the first try. It wasn&amp;rsquo;t until I ran a test that seeded a few entries did I notice the button was effectively at the bottom of the listView. I went through documentation to figure out how to get this working (the documentation is great but how they label and reference methods broke my brain for a second). Documentation wasn&amp;rsquo;t really providing me the answers I was looking for, so I searched for how Twitter handled it being well aware they were using React-Native not Swift &amp;amp; UIKit, but I figured if I could get a guess of the React/CSS/JS implementation I would be able to transfer that logic to Swift.&lt;/p&gt;

&lt;p&gt;It was pretty straightforward, absoluting of the button&amp;rsquo;s position with some padding. Seemed easy enough, Swift&amp;rsquo;s equivalent is constraints, and how it handled constraints was different than what I was used to but I was able to reason about it after messing around with it (admittedly it was mostly me plugging in random coordinates to see where the button would render at. In hindsight I could have simply looked up where 0,0 renders to and go from there).&lt;/p&gt;

&lt;p&gt;It still took many hours, headscratches, and coffee to get the button working correctly as errors pertaining to the button and the new screen kept popping up, unfortunately I can&amp;rsquo;t remember the errors specifically.&lt;/p&gt;

&lt;p&gt;There are somethings I need to clean up codewise, especially handling the temp image, camera icon swapping to user&amp;rsquo;s image in the new restaurant screen and other small issues. The image is fairly simple, instead of simply saying the image is optional (&lt;code&gt;image?&lt;/code&gt;) and using the nil-coalescing operator to conditionally render either the user image or the default image, I created two image objects one as the default image, and the other being the ImagePicker image the user supplies and used an if statement to check if the user grabbed an image from her/his gallery or took a picture to determine which to render. It&amp;rsquo;s not bad, it&amp;rsquo;s simply not Swift convention.&lt;/p&gt;

&lt;p&gt;Adding the onboarding screen was fun trying to learn how to implement it, and saving user data with CoreData was also a learning experience. Getitng it up and running was a struggle as apparently there&amp;rsquo;s a bug where even if you implement everything correctly, sometimes Xcode and your codebase won&amp;rsquo;t see that you&amp;rsquo;re using CoreData and will complain that your core data entities don&amp;rsquo;t exist, which I didn&amp;rsquo;t know about so it resulted in me spending hours deleting and recreating my Restaurant entity and it&amp;rsquo;s attributes.&lt;/p&gt;

&lt;p&gt;I won&amp;rsquo;t be releasing this app (mostly because I don&amp;rsquo;t have an Apple Developer account), but I am proud of it, I still prefer React Native for somethings, working with Xcode and Swift feels &amp;ldquo;slower&amp;rdquo; to me, but I can definitely see the appeal and why millions of developers love it. It&amp;rsquo;s rock solid, reliable, and well documented. My next app will be built using SwiftUI/Combine.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Basic C++ FPS</title>
    <link rel="alternate" href="http://dipet.me/projects/basic_fps/"/>
    <id>http://dipet.me/projects/basic_fps/</id>
    <published>2019-11-05T00:00:00-05:00</published>
    <updated>2019-11-08T00:40:19-05:00</updated>
    <author>
      <name>Dion Pettaway</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="Yay" src="https://i.imgur.com/QHES37v.gif" /&gt;&lt;/p&gt;

&lt;p&gt;So I wanted to make a FPS, well to be more specific I&amp;rsquo;ve been teaching myself the basics of 3D rendering and programming. So I wanted to do really start putting something to screen so I took a side step to create this very very simple completely 2D ascii based first person controlling uh&amp;hellip;thing. I already knew a bit of C++ prior to this but getting to use features like vectors (which are like dynamic arrays where data is entered at the end if I understand what I&amp;rsquo;m doing), it&amp;rsquo;s a pretty interesting learning experience, much of it was asking for help.&lt;/p&gt;

&lt;p&gt;Only available for Windows, download &lt;a href="https://github.com/Diope/basicFPS/releases"&gt;here&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>What I've Been Up To</title>
    <link rel="alternate" href="http://dipet.me/blog/updates/"/>
    <id>http://dipet.me/blog/updates/</id>
    <published>2019-10-10T01:00:00-04:00</published>
    <updated>2019-11-01T12:28:18-04:00</updated>
    <author>
      <name>Dion Pettaway</name>
    </author>
    <content type="html">&lt;p&gt;Been a while since I made a blog post, so I figured I&amp;rsquo;d write about what I&amp;rsquo;ve been learning as a of late. I&amp;rsquo;ve made strides in C++, I&amp;rsquo;m a bit more comfortable with pointers, as always stated the best way to learn is to throw yourself in the deep end and learn to swim. I&amp;rsquo;ve reversed engineered simple C++ projects to made use of pointers, breaking it until I figured out how things worked, and from there I&amp;rsquo;ve made a really small project that uses C++, the project itself is unconventional as I also wanted use vectors because I&amp;rsquo;m relearning math (I vomited). &lt;/p&gt;

&lt;p&gt;Other goals I have are learning Rust because I find it to be pretty interesting as a language and how it&amp;rsquo;s positioning itself, alongside this I&amp;rsquo;ve also dabbled with React Native and Flutter. At one point in my budding career I made an iPhone app with Swift 2, and I surprisingly still remember a lot about iPhone development&amp;ndash;one day I really want to take on the absolutely monstrous task of updating the app from Swift2 to current&amp;ndash;and so I wanted to compare the various avenues available to iPhone app creation. Flutter is interesting in how everything is in a stack (pretty sure they don&amp;rsquo;t call it stack though) I like it but it&amp;rsquo;s hard to reason about your code as you it gets longer and longer, I really love Dart as a programming language though and would love to see it get more life but that&amp;rsquo;s up to the will of the community. React Native is familiar to me because well&amp;hellip;I know React so moving over to React Native wasn&amp;rsquo;t too much of a struggle. Despite the fact I mostly work with Javascript/HTML/CSS, and that I am constantly working with React, I still don&amp;rsquo;t feel I&amp;rsquo;m great at it (it being React), slightly frustrating.&lt;/p&gt;

&lt;p&gt;Other things I&amp;rsquo;ve been dabbling in are graphics programming, specifically OpenGL and DirectX, at the moment I&amp;rsquo;ve been mostly learning the fundamentals, drawing a pixel on screen, projection matrix/orthogonal matrix. I&amp;rsquo;m making sure not to spread myself thin so I don&amp;rsquo;t get burned out, but I&amp;rsquo;m definitely enjoying learning about these things.&lt;/p&gt;

&lt;p&gt;The graphics programming is very low priority and it&amp;rsquo;s what I do to &amp;ldquo;reward&amp;rdquo; myself for data structures and algorithm studies. I still don&amp;rsquo;t know them all by memory but I have a very solid understand on why they exist, why some are better in some situations over others. I had always known big O notation though I&amp;rsquo;m not sure from where so that definitely helped in learning these things, but it truly changes your perspective on developing good programming practices. On this subject one area I still need to focus on problem solving and specifically problem solving challenges that many websites have like hackerrank, etc. I find myself not dedicating time to this and that&amp;rsquo;s something I plan to change.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Chattn</title>
    <link rel="alternate" href="http://dipet.me/projects/chattn/"/>
    <id>http://dipet.me/projects/chattn/</id>
    <published>2019-06-08T01:00:00-04:00</published>
    <updated>2019-11-01T11:34:00-04:00</updated>
    <author>
      <name>Dion Pettaway</name>
    </author>
    <content type="html">&lt;p&gt;Chattn is &lt;a href="https://chattn.netlify.com"&gt;live&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;They say the best way to learn something is to throw yourself into the deep end. I didn&amp;rsquo;t really have any grand idea for a project app, so I did what any other developer would do&amp;hellip;just recreate an existing product. Twitter is always a good goal, I created a very basic twitter clone with React/Redux but never hosted it but decided I would do so with this one. I chose to create this with Vue because I was always interested in it but never got around to giving it a spin as I usually stuck with React. I wanted to get out of my comfort zone and try something new. Vue clicked fairly quickly which is in large part to understanding React and having general knowledge of Javascript and reactive UI frameworks and paradigms. &lt;/p&gt;

&lt;p&gt;I wanted this unlike my React/Redux version of Twitter to go past surface level features of simply posting and displaying said posts, that&amp;rsquo;s pretty simple and tired and everyone is doing it. So I decided to add do more adding feature by feature. So I added features that I liked from Twitter and really thought about implementation, with this project I really wanted to focus on the backedn which in this case was Google&amp;rsquo;s firestore, well I originally went with Firebase, but wanted to try Firestore mostly because it was in my face on the Google dashboard &amp;ldquo;Try our next gen real time database Firestore!&amp;rdquo; Firestore follows many of the same paradigms as other NoSQLs so getting up and running was pretty easy, doubly so because of Google&amp;rsquo;s great documentation, and its similarities with its brother Firebase.&lt;/p&gt;

&lt;p&gt;Speaking on Vue, this is a fantastic little framework and I&amp;rsquo;m pretty sure I enjoy working on it more than React. It feels like it sits right between React and Angular as far as layers and components (see what I did there?) that are included in it. I really appreciate you can slowly implement Vue into a project whereas React is an all in affair. I haven&amp;rsquo;t really messed with Angular much so I won&amp;rsquo;t comment on it in any meaningful capacity. I will say that Vuex is much easier to reason about than Redux but I will also fully admit that it might because I &amp;ldquo;know&amp;rdquo; Redux so any other flavor of the flux architecture just clicks.&lt;/p&gt;

&lt;p&gt;As I previously stated, I learned Vue/Vuex as I worked on this project so looking through branches it becomes very apparent that I learn something new and implement it, on this project I didn&amp;rsquo;t create tests, which I full admit is my shortcoming as a developer and need to be much more dilligent on writing them before I start coding, there are no downsides to running tests, so always write them!&lt;/p&gt;

&lt;p&gt;&lt;img alt="neat" src="https://i.imgur.com/oV08wIf.gif" /&gt;&lt;/p&gt;

&lt;p&gt;Some of the features I&amp;rsquo;m most proud of are base64 image implementation so that I could have image previews before the user posts, I rewrote the image upload feature a few times. In the initial version, the user would select their image and it would upload to Google storage immediately after selecting it, leaving the user without the ability to cancel or change what image they used with their post. That was my naive implementation and it took me several days to come up with the base64 version. Admitted despite knowing of Base64, it took a while for it to occur to me to utilize it. Because of how I initially assumed twitter image posting worked I couldn&amp;rsquo;t think of a better way to do everything. The next thing I want to tackle is better handling of the moment the image is loading after a user hits post. I am not a fan of that second or two of waiting for the image to laod. There are several methods to fix this, the easiest and most straightforward is using Google Functions to resize/quality reduce the image so it loads quicker. This is the approach I&amp;rsquo;ve been working on but it&amp;rsquo;s proving to be frustrating as when a post is created, the image is sent to the Google storage and a permanent link is generated and that link is appended to the post&amp;rsquo;s imageURL field, THEN Google function kicks in and does imageMagicks on it but it does not generate a permanent link for the newly created image&amp;hellip;so I cannot appened it to the imageURL field. &lt;/p&gt;

&lt;p&gt;My other idea for tackling this is to get the dimensions of the user&amp;rsquo;s image and creating a placeholder container that is of the supplied dimensions then let the actual image take its place once the image has loaded, I thought of this approach due to wanting to better implement lazy loading where I wanted to use the same idea of using the image&amp;rsquo;s dimensions to create a temporary container (as well as taking the user image&amp;rsquo;s dominant colors to color the container)
&lt;img alt="Oop" src="https://i.imgur.com/c7nk5r9.gif" /&gt;&lt;/p&gt;

&lt;p&gt;Another feature I was proud of was more backend related but I spent a week agonizing on how to trigger images being deleted from the storage bucket when a user deleted their post, and was getting frustrated with being on the cusp of figuring it out but having to wait to test my firestore functions as they needed to be uploaded to the function module on Firebase.&lt;/p&gt;

&lt;p&gt;One thing I definitely shouldn&amp;rsquo;t have done was that I did all the CSS from scratch instead of using a library like Bulma or my new favorite, Tailwind. In hindsight this was both a good thing and a terrible mistake, it was a good thing because I really had to think of implementation and I learned how Vue handles CSS interactivity. The cons were&amp;hellip;I was basically doing everything from scratch, so everything you see and are interacting with was all me no help from libraries or baked in functions from a CSS framework. I tried to stick with the BEM methodology to the best of my abilities but I also wanted to mess with the various ways Vue handled CSS so it was getting harder, that and I would do naive implemenetation to figure out if I&amp;rsquo;m going in the right direction&lt;/p&gt;

&lt;p&gt;One of my biggest challenges I overcame was finally truly breaking my SQL mindset when working with NoSQL and embracing repeat data. What finally made it click for me was looking at data usage on database dashboard and realized I was making multiple requests for user data, and honestly even before that it just made no sense how often I was requesting data for simple things. A great example would be the bookmark feature I just recently added. They are stored as a subcollection based on the users&amp;rsquo; collection documents. The necessary information from each bookmark post is stored in this collection which in this case are: username, user id, profile picture, post image if there is one. This data is already present in the database but if I didn&amp;rsquo;t duplicate it I would have to query it from that particular user&amp;rsquo;s post collection. You can see how inefficient this becomes if the user were to have say 60 bookmarks, the database would have to query the all 60 users&amp;rsquo; post collection.&lt;/p&gt;

&lt;p&gt;There are still more features I want to add and I have an idea on how to go about them. I need to implement better display of notifications, right now it&amp;rsquo;s just plain text in green but this is just a toy project and I don&amp;rsquo;t want feature creep to set in and suddenly I&amp;rsquo;ve been working on it for months upon months (which technically I already have, I started this in like April or May&amp;hellip;). I&amp;rsquo;ve added some neat features so far and really need to refactor many others, but before I add anymore I need to add tests to this.&lt;/p&gt;

&lt;p&gt;Features I haved added so far are: Likes, posting, comments, image upload, profile creation and updating, profile photo and profile banner, bookmarks, authentication. At the very least I want to add in the ability to make an account private because it seems like a nice challenge.&lt;/p&gt;

&lt;p&gt;Lastly I have yet to add follower/following not because I didn&amp;rsquo;t know how to or anything of the sort, I created a decent implementation using PostgreSQL back when I made Drubbble. I definitely understand the underlying of how to implement it with a NoSQL, so implementation isn&amp;rsquo;t the reason. Honestly the reason is simply because&amp;hellip;it would introduce a bunch of feature creep haha, because I can&amp;rsquo;t stop at simply following/followers, I&amp;rsquo;d want to add the ability to block, having block automatically unfollow an account, and a few things which I imagine would mean I&amp;rsquo;m yet spending another couple months on the project on the minimum side. With that stated&amp;hellip;I&amp;rsquo;m probably still gonna add it.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ledgr</title>
    <link rel="alternate" href="http://dipet.me/projects/ledgr/"/>
    <id>http://dipet.me/projects/ledgr/</id>
    <published>2019-04-14T01:00:00-04:00</published>
    <updated>2019-11-08T00:42:22-05:00</updated>
    <author>
      <name>Dion Pettaway</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="these are my actual purchases" src="https://i.imgur.com/SQw00zL.png" /&gt;&lt;/p&gt;

&lt;p&gt;Login in &lt;a href="https://ledgr-vvtbxuzfpz.now.sh"&gt;here&lt;/a&gt; (give it a few seconds, now.sh is a bit slow)&lt;/p&gt;

&lt;p&gt;A hilariously useless React/Redux app using Firestore as the backend. Just a pretty straightforward ledger book, that you can use to add random expenditures that one might have, it has persistence and utilizes google and or twitter for the authen/autho. Redux is an interesting creature, as I feel like as I&amp;rsquo;m learning things&amp;hellip;I&amp;rsquo;m forgetting other things which is frustrating at points.&lt;/p&gt;

&lt;p&gt;I feel like I&amp;rsquo;ll never truly master Redux and by extension React, but I enjoy making decent sized apps with it regardless. I like it&amp;rsquo;s pure Javascript approach to things, granted it does have drawbacks, I enjoy it regardless. It allows developers to truly apply problem solving skills to overcome problems (and package those components if they need to be reused).&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>SQL noSQL</title>
    <link rel="alternate" href="http://dipet.me/blog/sqls/"/>
    <id>http://dipet.me/blog/sqls/</id>
    <published>2018-10-26T01:00:00-04:00</published>
    <updated>2018-10-26T10:58:26-04:00</updated>
    <author>
      <name>Dion Pettaway</name>
    </author>
    <content type="html">&lt;p&gt;Iâve been working nearly exclusively with NoSQL databases because theyâre a lot different than traditional SQL databases, and how you approach them feels very foreign to me to an uncomfortable degree. One of the things that Iâm still wrapping my head around is associations and the fact that you donât always necessarily make a new âtableâ for them. To give a more concrete example, Iâm working on a Dribbble clone,  In a traditional SQL database I would approach creating the user table as the following:&lt;/p&gt;

&lt;p&gt;The user table itself would consist of email, password for one table and the second table would be the âprofileâ table which would consist of the more personal information such as: location, twitter handle, background photo, profile photo, website, list of skills. A profile table &lt;code&gt;belongs to&lt;/code&gt; a user, and a user &lt;code&gt;has one&lt;/code&gt; profile (that is dependent on the user, thus if the user deletes her/his account the profile goes with it). With NoSQL databases, itâs not necessary to create another table to handle this association and can be embedded within the user document without much worry. Embedding the profile is the best approach for the profile because the profile is definite in the number of objects in it (create a separate document if you expect the size of said document to grow example being: storing user all a userâs comments).&lt;/p&gt;

&lt;p&gt;Itâs definitely taken some time to really wrap my head around this, and even on this Iâve found myself questioning âdo I need to even embedâ I find myself asking this due to the added complexity that comes with embedding and trying to both populate and query against embedded data. If you take a my commits for (Chirpper)[https://github.com/diope/chirpper) youâll see I go back and forth between embedding the profile and keeping it on the same depth as the rest of the user document.&lt;/p&gt;

&lt;p&gt;Itâs an interesting challenge working with NoSQL, in some ways it feels familiar to SQL databases (mostly in how you query data, itâs quite similar to most SQL ORMs), unfortunately I miss the power that comes with knowing SQL and being able to use that to be more nuanced (and performance minded) if necessary. I do not look forward to learning normalization techniques for NoSQL DB given how long itâs taken me to really get used to SQL databases techniques. That and I still find myself thinking of everything as SQL associations and joins.&lt;/p&gt;

&lt;p&gt;Honestly I prefer SQL databases (postgreSQL is bae!) but I do appreciate a few things about NoSQLs mostly the fact I can edit data much quicker, no migrations needed, you can even directly edit documents on the fly which in some cases makes troubleshooting easier.&lt;/p&gt;
</content>
  </entry>
</feed>
