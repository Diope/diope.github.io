<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dip･et</title>
  <subtitle>The ramblings of a developing web developer</subtitle>
  <id>http://dipet.me</id>
  <link href="http://dipet.me"/>
  <link href="http://dipet.me/feed.xml" rel="self"/>
  <updated>2018-10-26T01:00:00-04:00</updated>
  <author>
    <name>Dion Pettaway</name>
  </author>
  <entry>
    <title>SQL noSQL</title>
    <link rel="alternate" href="http://dipet.me/blog/sqls/"/>
    <id>http://dipet.me/blog/sqls/</id>
    <published>2018-10-26T01:00:00-04:00</published>
    <updated>2018-10-26T10:58:26-04:00</updated>
    <author>
      <name>Dion Pettaway</name>
    </author>
    <content type="html">&lt;p&gt;I’ve been working nearly exclusively with NoSQL databases because they’re a lot different than traditional SQL databases, and how you approach them feels very foreign to me to an uncomfortable degree. One of the things that I’m still wrapping my head around is associations and the fact that you don’t always necessarily make a new “table” for them. To give a more concrete example, I’m working on a Dribbble clone,  In a traditional SQL database I would approach creating the user table as the following:&lt;/p&gt;

&lt;p&gt;The user table itself would consist of email, password for one table and the second table would be the “profile” table which would consist of the more personal information such as: location, twitter handle, background photo, profile photo, website, list of skills. A profile table &lt;code&gt;belongs to&lt;/code&gt; a user, and a user &lt;code&gt;has one&lt;/code&gt; profile (that is dependent on the user, thus if the user deletes her/his account the profile goes with it). With NoSQL databases, it’s not necessary to create another table to handle this association and can be embedded within the user document without much worry. Embedding the profile is the best approach for the profile because the profile is definite in the number of objects in it (create a separate document if you expect the size of said document to grow example being: storing user all a user’s comments).&lt;/p&gt;

&lt;p&gt;It’s definitely taken some time to really wrap my head around this, and even on this I’ve found myself questioning “do I need to even embed” I find myself asking this due to the added complexity that comes with embedding and trying to both populate and query against embedded data. If you take a my commits for (Chirpper)[https://github.com/diope/chirpper) you’ll see I go back and forth between embedding the profile and keeping it on the same depth as the rest of the user document.&lt;/p&gt;

&lt;p&gt;It’s an interesting challenge working with NoSQL, in some ways it feels familiar to SQL databases (mostly in how you query data, it’s quite similar to most SQL ORMs), unfortunately I miss the power that comes with knowing SQL and being able to use that to be more nuanced (and performance minded) if necessary. I do not look forward to learning normalization techniques for NoSQL DB given how long it’s taken me to really get used to SQL databases techniques. That and I still find myself thinking of everything as SQL associations and joins.&lt;/p&gt;

&lt;p&gt;Honestly I prefer SQL databases (postgreSQL is bae!) but I do appreciate a few things about NoSQLs mostly the fact I can edit data much quicker, no migrations needed, you can even directly edit documents on the fly which in some cases makes troubleshooting easier.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>mininotes</title>
    <link rel="alternate" href="http://dipet.me/projects/mininotes-ohyea/"/>
    <id>http://dipet.me/projects/mininotes-ohyea/</id>
    <published>2018-10-12T01:00:00-04:00</published>
    <updated>2019-01-24T17:09:42-05:00</updated>
    <author>
      <name>Dion Pettaway</name>
    </author>
    <content type="html">&lt;p&gt;Grab the app &lt;a href="https://github.com/Diope/miniNotes/releases/download/v0.1.0/mininote-0.1.0.dmg"&gt;here&lt;/a&gt; (hosted on Github)&lt;/p&gt;

&lt;p&gt;mininotes is a very small appilication I created because I wanted a simple note taking app that lived in the menubar. Prior to creating this, I was using evernote&amp;rsquo;s app which was a lot of app just to use one small portion (and I had to make an account among other things, le sigh). I&amp;rsquo;ll be adding more to the application, mostly setting a global keybinding to invoke the app when it&amp;rsquo;s not the focus, and menu icon highlight when active.&lt;/p&gt;

&lt;p&gt;&lt;img alt="ooooh awww" src="https://user-images.githubusercontent.com/3039981/46878777-1d3bed80-ce12-11e8-9e1b-5a0d8a8a8f22.png" /&gt;&lt;/p&gt;

&lt;p&gt;I wrote about creating it &lt;a href="http://www.dipet.me/blog/electron"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enjoy the app!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Electron Buildin</title>
    <link rel="alternate" href="http://dipet.me/blog/electron/"/>
    <id>http://dipet.me/blog/electron/</id>
    <published>2018-10-11T01:00:00-04:00</published>
    <updated>2018-10-17T12:12:56-04:00</updated>
    <author>
      <name>Dion Pettaway</name>
    </author>
    <content type="html">&lt;p&gt;So I created another app for macOS mininote (available: &lt;a href="https://github.com/Diope/miniNotes/releases"&gt;here&lt;/a&gt;), the reason I created this is simple&amp;hellip;I have a convoluted process for making small notes or pasting them from my clipboard and it involves alfred -&amp;gt; textedit.app -&amp;gt; cmd+p or jotting down my note. Or sometimes I&amp;rsquo;ll open up the note app. But honestly I really got tired of doing that, and I didn&amp;rsquo;t want to keep either of them in my dock if only purely for aesthetics (I am chuckling as I write this). So I decided why not make a small scratchpad app that will live in my menu bar. I did some surface level searching for one, and came across evernote&amp;rsquo;s application but I didn&amp;rsquo;t want all the other crap it came with. I wasn&amp;rsquo;t trying to organize, sort, and archive my notes. I literally just wanted something I could quickly cmd+v something into or jot down random note and then go about my day until I needed it again. I figured, why not build it, how hard could it be?&lt;/p&gt;

&lt;p&gt;It wasn&amp;rsquo;t really hard, but it was involved. First question what language I was going to write this in. I actually early on thought about doing it with Swift (and honestly might do a rewrite), but then I thought what if I want to distribute it on Windows because I run into the same issue there despite the fact that nowadays I only use my Windows machine to play games on Steam/Uplay/Origin. I&amp;rsquo;ve created two tiny apps with C# and .NET but I didn&amp;rsquo;t want to have to create one version of my app on macOS in Swift then another for windows in C#, that&amp;rsquo;s way too much work for my small app. So that left the only logical choice, Javascript and using Electron. There was also Java but&amp;hellip;no. Don&amp;rsquo;t get me wrong, Java as a language is cool I guess, but yea no.&lt;/p&gt;

&lt;p&gt;I have a few issues with Electron, mostly memory management. After learning C/C++, the various *allocs, pointers and referencing (not saying I&amp;rsquo;m a pro but I understand now). I&amp;rsquo;ve grown a great appreciation for performant, efficient code.&lt;/p&gt;

&lt;p&gt;I am familiar with Electron as I&amp;rsquo;ve made an app with it previously called &lt;a href="https://github.com/Diope/Readr/releases"&gt;Reader&lt;/a&gt;, despite how it looks, it was pretty simple when you break it down. The hardest parts were related to interaction because I only used CSS/HTML for that instead of a UI framework like React or Vue.&lt;/p&gt;

&lt;p&gt;With this project I decided I would use React, I&amp;rsquo;m familiar with it and feel confident enough that I can get something simple like mininotes to play nice. I will go into detail in another post on all of the things I did, this post serves mostly to write what I learned creating this app.&lt;/p&gt;

&lt;p&gt;First thing I learned: Ejecting&amp;hellip;still no reason to it at all! React build is still going to be your friend as it allows you to update as React receives updates. Another thing I learned&amp;hellip;sometimes documentation isn&amp;rsquo;t the most clear from the examples given. I didn&amp;rsquo;t git commit them but I assure I spent a good week or two slamming my head against my machine trying to figure out why I couldn&amp;rsquo;t get menu icons to show up using Electron-Builder but everything worked with Electron-Packager.&lt;/p&gt;

&lt;p&gt;Finding a React Markdown component was fairly simple, I started with React-Ace but I was searching for a way to do inline text manipulation without needing a second screen and it seemed like I had to jump through hoops to get React-Ace to do the basics of that, though I did like the various languages it would parse, if the need for more arised. So I kept looking until I stumbled upon React-SimpleMDE. It allowed same window editing but had editor icons associated with it. That was no problem, I figured I&amp;rsquo;d just hack them out (which I proceeded to do until seeing the option to remove it lol). Did the neessary React setup (creating an handleChange&amp;hellip;handler and setting the text to the user passed value). Even though I&amp;rsquo;m decent with React, I quite often find myself forgetting some of the basics and needing to consult other projects I&amp;rsquo;ve done to remind myself (es un poco molesto). Once I got that working, I was essentially done as I didn&amp;rsquo;t need to pass the data back to electron as React was responsible for the UI (this will also make persistence straightfoward later, if I choose to implement it).&lt;/p&gt;

&lt;p&gt;From here I spent time styling the app (admittedly it wasn&amp;rsquo;t a whole bunch to style but still I I needed it to look nice), most of my time was spent on logo and menu icon design more than anything, I&amp;rsquo;m not trying to set the world on fire and win awards so I kept it simple, only doing three sketches before I opened Sketch and went to work. Now that I had that out of the way, it was time to package the app. Sidenote: I settled on 32x32 for the @2x menu icon size, and 16x16 for the @1x, in case anyone is reading this and wants to know the dimensions. I tried larger (44x44) but it looked entirely too big and had no padding so it sat at the edge of the top and bottom of the menubar, and it just looked hilariously out of place next to my other menubar apps&amp;rsquo; icons.&lt;/p&gt;

&lt;p&gt;Now it&amp;rsquo;s time to package this sucker, I initially decided on using Electron-Packager for this figuring that Electron-Builder was for more complex applications (I am not sure WHY I thought this), something I didn&amp;rsquo;t realise until this app was that Electron-Packager with it&amp;rsquo;s default settings just shoves the entire project folder as it is into your .dmg file, which is like holy shit why?! As a result of this, my app was over 700mb in size&amp;hellip;yea that was unacceptable, I was determined to get Electron-Builder to work, Electron apps are already huge because they require chrominium instance to run and that&amp;rsquo;s 40MB by itself. &lt;/p&gt;

&lt;p&gt;Where I messed up with Electron-Builder: The &lt;code&gt;build&lt;/code&gt; section of &lt;code&gt;package.json&lt;/code&gt;; looking at various examples online, I thought the only thing I needed was my &lt;code&gt;build&lt;/code&gt; directory that is produced by yarn/react build command. But this isn&amp;rsquo;t actually correct, I pretty much forgot that build will only produce code related to React (I know I know how did I forget this lol) so for a good 4 days, I sat in frustration wondering why things weren&amp;rsquo;t working when I packaged the app but worked fine when I ran &lt;code&gt;electron .&lt;/code&gt;. I didn&amp;rsquo;t have to do any of this with Readr because again it was CSS/HTML in the sense of not using a UI framework that utilized webpack or Rollup.js, or anything. Just a couple of files contained within the same folder (note to self, go back and separate things into different folders honestly). So once the lightbulb went out that reminded me I needed to include my electron folder (for two of those days, I honestly thought it was the way I was naming my folder containing my electron code 😂). So I had to tell Electron-Builder the folders it needs, which looks like&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="s2"&gt;"build"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"files"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="s2"&gt;"build/**/* (this is the react build folder and all it's sub-folders)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"electron/**/*"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt; &lt;span class="nx"&gt;my&lt;/span&gt; &lt;span class="nx"&gt;electron&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;folders&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;",
      "&lt;/span&gt;&lt;span class="nx"&gt;assets&lt;/span&gt;&lt;span class="cm"&gt;/**/&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;obvious&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ran Electron-builder and&amp;hellip;nope, so close! An error slightly unrelated to my project, I got a node error regarding fsevents, which was not resolved by npm installing it, well fuck so what do I do? Well apparently I could get around it by simply running the same command via yarn&amp;hellip;I don&amp;rsquo;t understand exacly why that I but honestly I didn&amp;rsquo;t research into it too much, this was supposed to be a weekend project that ended up becoming a two week project smh. 
(Note: the project was longer than the github log suggests, I duplicated the folder later and setup a new git).&lt;/p&gt;

&lt;p&gt;So the build is now working? No, apparently Electron-builder could not find &lt;code&gt;main.js&lt;/code&gt; despite the fact I specified it in my &lt;code&gt;package.json&lt;/code&gt;, some internet searching told me to add &lt;code&gt;homepage:&amp;#39;./&amp;#39;&lt;/code&gt; to my package.json file, alright. So I tried that&amp;hellip;and no dice. Hmm, well that addtion does make sense, as it would tell Electron what the entry point is for the app but yet it produces nothing. So some more digging on the interwebs taught me about Electron-Builder&amp;rsquo;s metadata option, which basically let&amp;rsquo;s you inject a file during the build project. After conflicting information on the correct syntax to use, which was &lt;code&gt;-c.extraMetadata.main=electron/main.js&lt;/code&gt; (in my case the main.js was located in the electron folder). Again I emphasis that &lt;code&gt;electron/main.js&lt;/code&gt; is specified as the starting point, which is fine for Electron itself (running &lt;code&gt;electron .&lt;/code&gt; produces no issues), but apparently means nothing to Electron-Builder? Anyways, that option fixes it. But I the npm fsevents issue popped back up. So I created a script called &lt;code&gt;electron-pack&lt;/code&gt; to build the app using the aforementioned flag and much like last time it worked.&lt;/p&gt;

&lt;p&gt;Alright, so everything builds and actually runs! Yatta, but one final issue stood in my way, Mojave came out and I introduced a dark mode. So now I had to figure out how to account for people using the dark mode menu bar, scheiße! I sat for about an hour searching through Electron documentation for API hooks for Mojave&amp;rsquo;s dark mode. I figured it&amp;rsquo;d be a pretty simple if statement, dark mode ? dark menubar icon : light menubar icon. I ended up finding out it was even more simple than that! Because I&amp;rsquo;ve always used dark mode (and prior a dark menu bar) I created the mininote icon in white&amp;hellip;which is wrong. All I had to do was create the icon in #000 black, and make sure the file name ended with &lt;code&gt;Template.png&lt;/code&gt; ex: &lt;code&gt;trayIconTemplate.png&lt;/code&gt;, and macOS takes care of making it white when used with dark mode, or leaving the icon as it&amp;rsquo;s default black when used in light mode.&lt;/p&gt;

&lt;p&gt;So that&amp;rsquo;s the basic run down of the creation of this app, or rather some of the random hangups I had while creating it.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Readr</title>
    <link rel="alternate" href="http://dipet.me/projects/readr/"/>
    <id>http://dipet.me/projects/readr/</id>
    <published>2018-09-20T01:00:00-04:00</published>
    <updated>2019-01-24T17:19:32-05:00</updated>
    <author>
      <name>Dion Pettaway</name>
    </author>
    <content type="html">&lt;p&gt;Grab the app &lt;a href="https://github.com/Diope/Readr/releases/download/v0.5.0/Readr-0.5.0.dmg"&gt;here&lt;/a&gt; (hosted on Github Releases)&lt;/p&gt;

&lt;p&gt;Readr is a VERY simple bookmark listing application. The idea was if there was an site you wanted to check out later you could add it to your list, kinda replacing &amp;ldquo;open in new tab&amp;rdquo; but then never actually opening it because you end up collecting a bunch of tabs&amp;hellip;which I&amp;rsquo;m guilty of.&lt;/p&gt;

&lt;p&gt;This is yet another electron App, a bit more complex than the bitcoin watcher app. This application required me to do much more digging in documentation to figure out some problems. This app also made me realize just how much frontend view layers like Vue and React help, creating the UI and having everything work I realised is much more difficult using without a view layer. So for all those old large electron apps that had state and different components props (see what I did there!) to you because you are amazing people!&lt;/p&gt;

&lt;p&gt;There isn&amp;rsquo;t much else to this application, it&amp;rsquo;s very much WYSIWYG in functionality. I don&amp;rsquo;t have any real desire to be an electron developer, I&amp;rsquo;m just enjoying software development and the feeling that comes with making my small random app ideas into functinoal pieces of technology.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Bookmarks rawr" src="https://i.imgur.com/t2QzV87.png" /&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Drybbble? Drybbble</title>
    <link rel="alternate" href="http://dipet.me/projects/drybbble/"/>
    <id>http://dipet.me/projects/drybbble/</id>
    <published>2018-09-14T01:00:00-04:00</published>
    <updated>2018-10-12T15:13:31-04:00</updated>
    <author>
      <name>Dion Pettaway</name>
    </author>
    <content type="html">&lt;p&gt;Drybbble is an current project that will essentially be a Dribbble clone made with MongoDB/Express/Node.js that generates API endpoints paired with React for the UI (and I will be making a second that uses Vue.js). I have previously recreated Dribbble, calling it &lt;a href="https://github.com/diope/drubbble"&gt;Drubbble&lt;/a&gt; using Rails 4.2 back in 2016-2017 (I will be updating that to Rails 5 in the second half of Dec when I have free time). Initially I was going to use PostgreSQL because I&amp;rsquo;m very comfortable with SQL commands, associations, and normalization/denormalization so I decided to instead use MongoDB, which I&amp;rsquo;ve only used in tutorial and toy app capacity, and I like the challenge&amp;hellip;and oh what a challenge it has been!&lt;/p&gt;

&lt;p&gt;I will do a write up on what I&amp;rsquo;ve learned so far at a later date.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>SearchTubes</title>
    <link rel="alternate" href="http://dipet.me/projects/searchTubes/"/>
    <id>http://dipet.me/projects/searchTubes/</id>
    <published>2018-03-21T01:00:00-04:00</published>
    <updated>2019-01-22T21:41:38-05:00</updated>
    <author>
      <name>Dion Pettaway</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="its searching" src="https://i.imgur.com/mgbNQxJ.gif" /&gt;&lt;/p&gt;

&lt;p&gt;Yet another small &lt;a href="https://github.com/Diope/Searchtubes"&gt;React project&lt;/a&gt;, I make these to get more comfortable with the framework and Javascript. I made this one with the intent on consuming an API.&lt;/p&gt;

&lt;p&gt;Things I learned with this project:&lt;/p&gt;

&lt;p&gt;Better structure, separation of concerns, a single point of entry. That is to say I only need to fetch the API in one place and send out that data to all the children components. I have another React project that I&amp;rsquo;m going to refactor as I was calling the API on several different components, even at the time of doing it I knew it was wrong (DRY) but did it anyway.&lt;/p&gt;

&lt;p&gt;Component life cycles. Granted I only used one (&lt;code&gt;componentWillMount()&lt;/code&gt;), I&amp;rsquo;ve become familiar with the others to some extent, at the very least I&amp;rsquo;m aware of their uses.&lt;/p&gt;

&lt;p&gt;To install:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;clone git repository&lt;/li&gt;
&lt;li&gt;at the command line run &lt;code&gt;yarn start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;localhost:8080&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
