<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dip･et</title>
  <subtitle>The ramblings of a developing web developer</subtitle>
  <id>http://dipet.me</id>
  <link href="http://dipet.me"/>
  <link href="http://dipet.me/feed.xml" rel="self"/>
  <updated>2018-02-11T00:00:00-05:00</updated>
  <author>
    <name>Dion Pettaway</name>
  </author>
  <entry>
    <title>Decisions</title>
    <link rel="alternate" href="http://dipet.me/projects/decisionsdecisions/"/>
    <id>http://dipet.me/projects/decisionsdecisions/</id>
    <published>2018-02-11T00:00:00-05:00</published>
    <updated>2018-03-12T14:53:36-04:00</updated>
    <author>
      <name>Dion Pettaway</name>
    </author>
    <content type="html">&lt;p&gt;I should update my blog more often, but yea as of late I&amp;rsquo;ve been leaning into React quite a bit. I&amp;rsquo;m not exactly sure when it clicked for me as a framework (view layer) but I don&amp;rsquo;t just going in and breaking projects and trying to figure out what does what along with some great written explanations/tutorials are the quickest way for things to click.&lt;/p&gt;

&lt;p&gt;&lt;img alt="much React, make decisions" src="https://i.imgur.com/Mqah47Q.gif" /&gt;&lt;/p&gt;

&lt;p&gt;This is my first React project and isn&amp;rsquo;t talking to an API or anything (I&amp;rsquo;m eventualy going to create a project that does such). It&amp;rsquo;s pretty simple and straightforward in what it does. You can enter a bunch of choices then the app will decide which one you should do.&lt;/p&gt;

&lt;p&gt;To run, first clone the repository. At the commandline run &lt;code&gt;yarn install&lt;/code&gt; then &lt;code&gt;yarn dev-server&lt;/code&gt; then &lt;code&gt;yarn serve&lt;/code&gt;. I actually spent some time on the design portion on this project!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>I am A Programmer</title>
    <link rel="alternate" href="http://dipet.me/blog/pushingpastimposter/"/>
    <id>http://dipet.me/blog/pushingpastimposter/</id>
    <published>2018-01-28T00:00:00-05:00</published>
    <updated>2018-03-12T14:00:00-04:00</updated>
    <author>
      <name>Dion Pettaway</name>
    </author>
    <content type="html">&lt;p&gt;So I initially started on my path to becoming a web developer in 2015/2016 and in hindsight this was a terrible time in my life to attempt, but worth it in the end. I suffered from untreated chronic depression and borderline personality disorder. I didn’t know I had the latter, but always expected the former. I just assumed I was “sad” because my life hadn’t gone the way I expected, we all get like that from time to time over myriad of different things.&lt;/p&gt;

&lt;p&gt;I started learning web development via Ruby on Rails, it was a fun experience and I learned how to really solve problems on my own. I felt very accomplished when I finished the One Month Rail course, then went on to do Michael Hartl’s course. Much more information and many questions I had about rails started being answered. From Hartl’s course, I started creating my own projects that went past the simple CRUD operations of making a post. If I had a passion for anything at its core, it’s definitely the act of learning things. I’ve never been satisfied with surface level knowledge, and despite the fact I was learning and picking up rails, I felt two things:
Knowing rails wasn’t enough
This wasn’t real programming
These two things became a negative feedback loop for me and compounded with my existing mental conditions I unknowingly descended upon a path of “never being enough”.
Knowing rails wasn’t enough, so I learned Ruby (and honestly you SHOULD learn the programming language and fundamentals of programming, I don’t think is something that should ever be optional). Ruby wasn’t enough for me, I needed to learn how Ruby works, so I started teaching myself the fundamentals of computer science, language construction, usage, design patterns, algorithms, data structures, SQL, etc.  To me I was a self taught person entering a field where many men and women spent 4 years of their life learning, 4 years of late night studying for exams. At the very least I could try to reach some of the heights they did. I felt obligated. Once again part of this continual learning is because I simply like to learn. I can (and do) watch CS lectures recorded from different colleges, I enjoy people talking about how algorithms and data structures work (the feeling I had when recursion finally made sense was the best!).&lt;/p&gt;

&lt;p&gt;I sidelined my developer career for two years because of my own mental conditions, but at the same time I was able to learn so much more due to the mental goals I kept moving in my head before I applied for positions. I still have much to learn by way of data structures, design patterns, and algorithms (I still couldn’t implement a basic BST if you asked but I can explain them to you!).&lt;/p&gt;

&lt;p&gt;For new developers reading, you are not going to know everything. No employer is going to expect you to. If you’ve been granted an interview, trust me, I know exactly what you can or cannot do. They’re interviewing you because they see your potential, they see someone they can help take their career to the next step and who in turn will help their company and products grow. Don’t worry about not thinking you belong, I assure you when you’re sitting down and coding your coworkers aren’t thinking you’re trash or anything of the like. Ask them questions, they will be more than willing to help you!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Bitcoin Watcher</title>
    <link rel="alternate" href="http://dipet.me/projects/bitcoinwatcher/"/>
    <id>http://dipet.me/projects/bitcoinwatcher/</id>
    <published>2018-01-16T00:00:00-05:00</published>
    <updated>2018-03-12T14:13:17-04:00</updated>
    <author>
      <name>Dion Pettaway</name>
    </author>
    <content type="html">&lt;p&gt;I created my first electron application called &lt;a href="https://github.com/Diope/bitcoin-electron/releases"&gt;Bitcoin Watcher&lt;/a&gt;! The name is cheesy but on my next project I&amp;rsquo;ll name it something more start-upy (omit some vowels!) While it might be absolutely tiny and kinda pointless unless you really need updates on bitcoin when it reaches a certain price, I&amp;rsquo;m still pretty proud of this.&lt;/p&gt;

&lt;p&gt;Design wise it&amp;rsquo;s not my best (if I were to work on the design portion I would never get it done.) I&amp;rsquo;ve learned much about Electron while creating this. First and foremost Electron&amp;rsquo;s documentation is great and you can find examples for nearly anything you&amp;rsquo;re looking for on their page.&lt;/p&gt;

&lt;p&gt;I wanted to create this not to be a application developer, but because I enjoy problem solving and wanted to see how far I&amp;rsquo;ve come with Javascript, how in depth my knowledge is. I&amp;rsquo;ll admit this project did very little to help me guage that, but I enjoyed the problem solving aspect all the same. &lt;/p&gt;

&lt;p&gt;I think I&amp;rsquo;ll use this project as my muse of sorts in which I periodically will come back to it and make it better, expand the feature set, etc.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Profile</title>
    <link rel="alternate" href="http://dipet.me/design/profile_page/"/>
    <id>http://dipet.me/design/profile_page/</id>
    <published>2015-10-11T01:00:00-04:00</published>
    <updated>2015-11-02T18:23:48-05:00</updated>
    <author>
      <name>Dion Pettaway</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="profile" src="http://dipet.me/images/weekly003@2x.png" /&gt;&lt;/p&gt;

&lt;p&gt;Another day, another UI daily design (if only I did them daily!), This is a continuation of the previous Audeo design, but I kinda sorta had no clue what I was doing with the whole Audeo so this just a typicalish profile page for yet another mobile social network.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m sticking with the angled image header that I introduced with the sign up page (which after working with Firebase, I need to go and adjust). The profile page needs work, more information can be displayed befor the user needs to scroll. That&amp;rsquo;s the downside of the header image&amp;rsquo;s current style. I&amp;rsquo;ll have to adjust and work with that a bit.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Mobile Sign-Up</title>
    <link rel="alternate" href="http://dipet.me/design/audeo_signup_design/"/>
    <id>http://dipet.me/design/audeo_signup_design/</id>
    <published>2015-10-09T01:00:00-04:00</published>
    <updated>2015-10-31T00:19:13-04:00</updated>
    <author>
      <name>Dion Pettaway</name>
    </author>
    <content type="html">&lt;p&gt;Decided to take part in the daily UI design challege, though I had to make it a weekly thing as I don&amp;rsquo;t feel like I&amp;rsquo;d do my best work if I had to do one a day. Okay maybe I&amp;rsquo;m lying and I just will forget to do one daily.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Design" src="http://www.dipet.me/images/weekly001.jpg" /&gt;
&lt;a href="http://www.dipet.me/images/weekly001.jpg"&gt;Click for Full&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first challenge only said the Sign Up page and not the entire onboarding process&amp;hellip;which is my favorite part to be honest. Thinking of the best way to ease users into your product with the least amount of friction possible is much fun. Getting feedback from test users and using that data to better the product is one of my favorite feelings next to figuring out a programming issue. Obviously &amp;ldquo;Audeo&amp;rdquo; isn&amp;rsquo;t a real app (if it is, apologizes to the creators. Purely coincidental I promise!).&lt;/p&gt;

&lt;p&gt;I made a conscious effort to push the user to signing in with Facebook or Twitter over creating an account. It&amp;rsquo;s easier for the user and that&amp;rsquo;s one less barrier they have to deal with when using the app. Many developers don&amp;rsquo;t release that users hate having to give out their email to YASN (Yet Another Social Network); removing this barrier makes them that much more likely to want to try out your product. Facebook is by far the most used way to sign in/signup for new products; it only makes sense to push the user to it in a way they don&amp;rsquo;t feel like you&amp;rsquo;re truly forcing them. By simply emphasizing Facebook and Twitter via giving their button more attention by way of color. You push the user to it without them knowing it. It is a much better approach than removing the ability to sign up for an account with your product&amp;rsquo;s internal sign up service.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Moving Data Between Views</title>
    <link rel="alternate" href="http://dipet.me/blog/MovingData/"/>
    <id>http://dipet.me/blog/MovingData/</id>
    <published>2015-09-29T01:00:00-04:00</published>
    <updated>2015-10-28T17:01:53-04:00</updated>
    <author>
      <name>Dion Pettaway</name>
    </author>
    <content type="html">&lt;p&gt;The delegate pattern is commonly used to situations such as: Screen A opens screen B and at some point screen B needs to communicate back to screen A. The solution is to make screen A the delgate of screen B, so that B can send it’s messages to A whenever it needs to. This is the preferred way of screen/view communication. The principle of screens being independent of each others but yet still able to communicate is called loose coupling and is considered good software design practice. Delegates go hand-in-hand with protocols which is a prominent feature of the Swift language. For an example of setting up protocols and delegates see below&lt;/p&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="kt"&gt;AddItemViewControllerDelegate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;addItemViewControllerDidCancel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;AddItemViewController&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;addItemViewController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;AddItemViewController&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;didFinishAddingItem&lt;/span&gt; &lt;span class="nv"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ChecklistItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines the AddItemViewController Delegate protocol. In Swift a protocol is simply a name for a group of methods. A protocol doesn’t implement any of the methods it declares. It just says: any object that conforms to this protocol must implement methods, X,Y, and Z. &lt;/p&gt;

&lt;p&gt;The two methods listed in the example are:
&lt;code&gt;addItemViewControllerDidCancel()&lt;/code&gt;
&lt;code&gt;addItemViewController(didFinishAddingItem)&lt;/code&gt;
The first oneis for when the user presses Cancel, the second one is for when they press Done. In that case, the didFinishAddingItem paramter passes along the new ChecklistItem object. To make the ChecklistViewController conform to this created protocol, it must provide implementations of these two methods. From then one can refer to the ChecklistViewContorller using just the protocol name.&lt;/p&gt;

&lt;p&gt;Inside the AddItemViewController you can write &lt;code&gt;var delegate: AddItemViewController Delegate&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The variable delegate is nothing more than a reference to some object that implements the methods of this protocol. You can send messages to the object from the delegate variable, without knowing what kind of object it really is.&lt;/p&gt;

&lt;p&gt;Swift has a shorthand for skipping the work when delegate is not set:
&lt;code&gt;delegate?.addItemViewControllerDidCancel(self)&lt;/code&gt;
Here the ? tells Swift not to send the message if delegate is nil. You can read this as, “Is there a delegate?” Then send the message. This is known as optional chaining and is used a lot within Swift.&lt;/p&gt;

&lt;p&gt;Five Steps to Delegates&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Define a delegate protocol for object B.&lt;/li&gt;
&lt;li&gt;Give object B an optional delegate variable. This variable should be weak.&lt;/li&gt;
&lt;li&gt;Make object B send messages to its delegate whens oemthing interesting happens, such as the user pressing the cancel or done buttons, or when it needs a piece of infromation&lt;/li&gt;
&lt;li&gt;Make object A conform to the delegate protocol. It should put the name of the protocol in its class line and implement the methods from the protocol.&lt;/li&gt;
&lt;li&gt;Tell object B that object A is now it’s delegate. The proper place to do this is in the prepareForSegue(sender) method.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;prepareForSegue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;segue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIStoryboardSegue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;AnyObject&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// 1&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;segue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"AddItem"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 2&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;navigationController&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;segue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;destinationViewController&lt;/span&gt; &lt;span class="k"&gt;as!&lt;/span&gt; &lt;span class="kt"&gt;UINavigationController&lt;/span&gt;
    &lt;span class="c1"&gt;// 3&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;controller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;navigationController&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;topViewController&lt;/span&gt; &lt;span class="k"&gt;as!&lt;/span&gt; &lt;span class="kt"&gt;AddItemViewController&lt;/span&gt;
    &lt;span class="c1"&gt;// 4&lt;/span&gt;
    &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delegate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is what the prepareForSegue does step-by-step&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Because there may be more than one segue per view controller, it’s best practice to give each one a unique identifier and to check for that identifier first to make sure you’re handling the correct segue.&lt;/li&gt;
&lt;li&gt;The new view controller can be found in segue.destinationViewController. The storyboard shows that the segue does not go directly to AddItemViewController but to the navigation controller that embeds it.&lt;/li&gt;
&lt;li&gt;To find the addItemViewController, look at the navigation controller’s topViewController property. This property refers to the screen that is currently active inside the navigation controller.&lt;/li&gt;
&lt;li&gt;Once you have a reference to the AddItemViewController object, you can set its delegate property to self and the connection is complete. Self in the example refers to the ChecklistViewController.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
